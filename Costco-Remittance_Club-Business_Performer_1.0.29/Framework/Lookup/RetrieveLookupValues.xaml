<Activity mc:Ignorable="sap sap2010" x:Class="GetLookupValues" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_LookupConfig" Type="InArgument(scg:Dictionary(x:String, scg:Dictionary(x:String, x:String)))" />
    <x:Property Name="in_dt_UpdatedDownloadRemitance" Type="InArgument(sd:DataTable)" />
    <x:Property Name="out_LookupOutput" Type="OutArgument(scg:Dictionary(x:String, scg:Dictionary(x:String, x:Object)))" />
    <x:Property Name="in_StartRange" Type="InArgument(x:String)" />
    <x:Property Name="in_BusinessConfigPath" Type="InArgument(x:String)" />
    <x:Property Name="in_InputFolderPath" Type="InArgument(x:String)" />
  </x:Members>
  <this:GetLookupValues.in_InputFolderPath>
    <InArgument x:TypeArguments="x:String" />
  </this:GetLookupValues.in_InputFolderPath>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap2010:WorkflowViewState.IdRef>GetLookupValues_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Numerics</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>System.Activities.Runtime.Collections</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>FasterLookUpApproachesTest.Core</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Runtime.Numerics</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="GetLookupValues" sap:VirtualizedContainerService.HintSize="1452.0000000000002,2924" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="571.2,2900.8" sap2010:WorkflowViewState.IdRef="TryCatch_1">
      <TryCatch.Try>
        <Sequence sap2010:Annotation.AnnotationText="This workflow gets specific lookup values from the provided lookup data" DisplayName="Get Lookup Values" sap:VirtualizedContainerService.HintSize="534.4,2646.4" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <Sequence.Variables>
            <Variable x:TypeArguments="scg:List(x:String)" Name="ListOfLookupValues" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Assign sap:VirtualizedContainerService.HintSize="500.8,113.6" sap2010:WorkflowViewState.IdRef="Assign_5">
            <Assign.To>
              <OutArgument x:TypeArguments="scg:Dictionary(x:String, scg:Dictionary(x:String, x:Object))">[out_LookupOutput]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, scg:Dictionary(x:String, x:Object))">[New Dictionary(of String, Dictionary(of String, Object))]</InArgument>
            </Assign.Value>
          </Assign>
          <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For Each CurrentKey" sap:VirtualizedContainerService.HintSize="500.8,2441.6" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[in_LookupConfig.Keys]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="CurrentKey" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="467.2,2304" sap2010:WorkflowViewState.IdRef="Sequence_3">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="sd:DataTable" Name="dt_LookupOutput" />
                    <Variable x:TypeArguments="scg:Dictionary(x:String, x:Int32)" Name="LookupIndex" />
                    <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="LookupOutputDictionary" />
                    <Variable x:TypeArguments="x:String" Name="FinalValue" />
                    <Variable x:TypeArguments="x:String" Name="LookupFilePath" />
                    <Variable x:TypeArguments="x:String" Name="LookupKey" />
                    <Variable x:TypeArguments="scg:List(x:String)" Name="LookupSheetName" />
                    <Variable x:TypeArguments="scg:List(x:String)" Name="LookupReturnColumns" />
                    <Variable x:TypeArguments="x:String" Name="WorkbookLastColumnIndex" />
                  </Sequence.Variables>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign DisplayName="ListOfLookupValues" sap:VirtualizedContainerService.HintSize="433.6,113.6" sap2010:WorkflowViewState.IdRef="Assign_4">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(x:String)">[ListOfLookupValues]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(x:String)">[new List(of String)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:Annotation.AnnotationText="From the data table in_dt_UpdatedDownloadRemitance, get all the rows. For each row, extract the value from a specific column (whose name is dynamically looked up), convert it to a string, and return the results as a list" DisplayName="Assign ListOfLookupValues" sap:VirtualizedContainerService.HintSize="433.6,189.6" sap2010:WorkflowViewState.IdRef="Assign_3">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(x:String)">[ListOfLookupValues]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(x:String)">[in_dt_UpdatedDownloadRemitance.AsEnumerable().Select(Function(row) CStr(row(in_LookupConfig(CurrentKey)("Lookup Value Column Name")))).ToList()]</InArgument>
                    </Assign.Value>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Assign>
                  <Assign sap2010:Annotation.AnnotationText="Get the 'Final Value' for the current key from the configuration, and store it in the variable called FinalValue." DisplayName="Final Value" sap:VirtualizedContainerService.HintSize="433.6,157.6" sap2010:WorkflowViewState.IdRef="Assign_8">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[FinalValue]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[in_LookupConfig(CurrentKey)("Final Value")]</InArgument>
                    </Assign.Value>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Assign>
                  <Assign sap2010:Annotation.AnnotationText="Check if the input folder path ends with a slash (\ or /). If it does, remove it. Then add a backslash (\) and the file name from the config" sap:VirtualizedContainerService.HintSize="433.6,157.6" sap2010:WorkflowViewState.IdRef="Assign_11">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[LookupFilePath]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String" xml:space="preserve">[if(in_InputFolderPath(in_InputFolderPath.Length - 1) = "\" or in_InputFolderPath(in_InputFolderPath.Length - 1) = "/", in_InputFolderPath.Replace(in_InputFolderPath(in_InputFolderPath.Length - 1), ""), in_InputFolderPath) +  "\" + in_LookupConfig(CurrentKey)("Lookup File Name Path")]</InArgument>
                    </Assign.Value>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Assign>
                  <Assign sap2010:Annotation.AnnotationText="Get the value of the 'Lookup Key' field from the configuration for the current key" sap:VirtualizedContainerService.HintSize="433.6,157.6" sap2010:WorkflowViewState.IdRef="Assign_12">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[LookupKey]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[in_LookupConfig(CurrentKey)("Lookup Key")]</InArgument>
                    </Assign.Value>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Assign>
                  <Assign sap:VirtualizedContainerService.HintSize="433.6,113.6" sap2010:WorkflowViewState.IdRef="Assign_13">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(x:String)">[LookupSheetName]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(x:String)">[new List(of string) from {in_LookupConfig(CurrentKey)("Sheet Name")}]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap2010:Annotation.AnnotationText="Create a new list with two items: LookupKey and the value of Lookup Column Name from the configuration for the current key — then assign that list to LookupReturnColumns." sap:VirtualizedContainerService.HintSize="433.6,173.6" sap2010:WorkflowViewState.IdRef="Assign_14">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(x:String)">[LookupReturnColumns]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(x:String)">[new List(of String) from {LookupKey, in_LookupConfig(CurrentKey)("Lookup Column Name")}]</InArgument>
                    </Assign.Value>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Assign>
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Reading the &quot;Order report&quot; file and returns the column name index (e.g &quot;N&quot;)." DisplayName="ReadWorkbookAndGetLastColumnIndex - Invoke Workflow File (Framework\Utilities\ReadWorkbookAndGetLastColumnIndex.xaml)" sap:VirtualizedContainerService.HintSize="433.6,220" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="Framework\Utilities\ReadWorkbookAndGetLastColumnIndex.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_WorkbookPath">[LookupFilePath]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_WorkbookSheetName">[LookupSheetName.First]</InArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="out_WorkbookLastColumnIndex">[WorkbookLastColumnIndex]</OutArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:InvokeWorkflowFile>
                  <Assign sap:VirtualizedContainerService.HintSize="433.6,113.6" sap2010:WorkflowViewState.IdRef="Assign_21">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[in_StartRange]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[string.Format("A1:{0}", WorkbookLastColumnIndex)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:Comment sap:VirtualizedContainerService.HintSize="433.6,396" sap2010:WorkflowViewState.IdRef="Comment_4" Text="GeneralLookup.xaml&#xA;&#xA;GeneralLookupQueryGenerator.cs : Builds and returns a SQL-like query string with filters applied on fields such as Invoice/Status, Sold-To, SourceSheet(OrderRpt). This activity does not execute or extract the query results.&#xA;&#xA;Run query activity : This return the all values such as Invoice/Status, Sold-To, SourceSheet(OrderRpt).&#xD;&#xA;&#xA;Output: Generates and returns a DataTable containing filtered values such as  Invoice/Status, Sold-To, SourceSheet(OrderRpt) in GenerateLookup.xml" />
                  <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="GeneralLookup - Invoke Workflow File (Frameworks\Lookup\GeneralLookup.cs)" sap:VirtualizedContainerService.HintSize="433.6,176" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Framework\Lookup\GenericLookupFlow.xaml">
                    <ui:InvokeWorkflowFile.Arguments>
                      <InArgument x:TypeArguments="x:String" x:Key="in_ExcelFilePath">[LookupFilePath]</InArgument>
                      <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_LookupValues">[ListOfLookupValues]</InArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_LookupKey">[LookupKey]</InArgument>
                      <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_LookupSheetNames">[LookupSheetName]</InArgument>
                      <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_LookupReturnColumns">[LookupReturnColumns]</InArgument>
                      <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dt_QueryOutput">[dt_LookupOutput]</OutArgument>
                      <InArgument x:TypeArguments="x:String" x:Key="in_StartRange">[in_StartRange]</InArgument>
                      <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Int32)" x:Key="out_IndexingMap">[LookupIndex]</OutArgument>
                    </ui:InvokeWorkflowFile.Arguments>
                  </ui:InvokeWorkflowFile>
                  <If Condition="[FinalValue = &quot;No&quot;]" sap:VirtualizedContainerService.HintSize="433.6,56.8" sap2010:WorkflowViewState.IdRef="If_1">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Sequence DisplayName="Then" sap:VirtualizedContainerService.HintSize="534.4,1793.6" sap2010:WorkflowViewState.IdRef="Sequence_4">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="sd:DataTable" Name="dt_ReferenceLookupOutput" />
                          <Variable x:TypeArguments="scg:Dictionary(x:String, x:Int32)" Name="ReferenceLookupIndex" />
                          <Variable x:TypeArguments="x:String" Name="AddColumnName" />
                          <Variable x:TypeArguments="x:String" Name="ReferenceLookupKey" />
                          <Variable x:TypeArguments="scg:List(x:String)" Name="ReferenceLookupSheetNames" />
                          <Variable x:TypeArguments="scg:List(x:String)" Name="ReferenceLookupReturnColumns" />
                          <Variable x:TypeArguments="scg:List(x:String)" Name="ReferenceLookupValues" />
                        </Sequence.Variables>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign sap:VirtualizedContainerService.HintSize="500.8,113.6" sap2010:WorkflowViewState.IdRef="Assign_15">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[ReferenceLookupKey]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[in_LookupConfig(CurrentKey)("Lookup Column Name")]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign sap:VirtualizedContainerService.HintSize="500.8,113.6" sap2010:WorkflowViewState.IdRef="Assign_16">
                          <Assign.To>
                            <OutArgument x:TypeArguments="scg:List(x:String)">[ReferenceLookupSheetNames]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="scg:List(x:String)">[new List(of string) from {in_LookupConfig(CurrentKey)("Reference Sheet Name")}]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign sap:VirtualizedContainerService.HintSize="500.8,113.6" sap2010:WorkflowViewState.IdRef="Assign_17">
                          <Assign.To>
                            <OutArgument x:TypeArguments="scg:List(x:String)">[ReferenceLookupReturnColumns]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="scg:List(x:String)">[new List(of String) from {ReferenceLookupKey, CurrentKey}]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Assign sap2010:Annotation.AnnotationText="It creates a list of strings containing all values from a specific column in the DataTable." sap:VirtualizedContainerService.HintSize="500.8,157.6" sap2010:WorkflowViewState.IdRef="Assign_20">
                          <Assign.To>
                            <OutArgument x:TypeArguments="scg:List(x:String)">[ReferenceLookupValues]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="scg:List(x:String)">[dt_LookupOutput.AsEnumerable().Select(Function(row) CStr(row(ReferenceLookupKey))).ToList()]</InArgument>
                          </Assign.Value>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </Assign>
                        <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="GeneralLookup - Invoke Workflow File (Frameworks\Lookup\GeneralLookup.cs)" sap:VirtualizedContainerService.HintSize="500.8,176" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="Framework\Lookup\GenericLookupFlow.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="in_ExcelFilePath">[in_BusinessConfigPath]</InArgument>
                            <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_LookupValues">[ReferenceLookupValues]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_LookupKey">[ReferenceLookupKey]</InArgument>
                            <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_LookupSheetNames">[ReferenceLookupSheetNames]</InArgument>
                            <InArgument x:TypeArguments="scg:List(x:String)" x:Key="in_LookupReturnColumns">[ReferenceLookupReturnColumns]</InArgument>
                            <OutArgument x:TypeArguments="sd:DataTable" x:Key="out_dt_QueryOutput">[dt_ReferenceLookupOutput]</OutArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="in_StartRange">[in_StartRange]</InArgument>
                            <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Int32)" x:Key="out_IndexingMap">[ReferenceLookupIndex]</OutArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                        </ui:InvokeWorkflowFile>
                        <Assign DisplayName="Current Key means Account, Division...." sap:VirtualizedContainerService.HintSize="500.8,113.6" sap2010:WorkflowViewState.IdRef="Assign_9">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[AddColumnName]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[CurrentKey]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <InvokeMethod sap2010:Annotation.AnnotationText="It adds a new column to the DataTable dt_LookupOutput with the name stored in the variable AddColumnName." DisplayName="Add Column - AddColumnName" sap:VirtualizedContainerService.HintSize="500.8,243.2" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Add">
                          <InvokeMethod.TargetObject>
                            <InArgument x:TypeArguments="sd:DataColumnCollection">[dt_LookupOutput.Columns]</InArgument>
                          </InvokeMethod.TargetObject>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <InArgument x:TypeArguments="x:String">[AddColumnName]</InArgument>
                        </InvokeMethod>
                        <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[dt_LookupOutput]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="500.8,702.4" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
                          <ui:ForEachRow.Body>
                            <ActivityAction x:TypeArguments="sd:DataRow">
                              <ActivityAction.Argument>
                                <DelegateInArgument x:TypeArguments="sd:DataRow" Name="CurrentRow" />
                              </ActivityAction.Argument>
                              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="467.2,513.6" sap2010:WorkflowViewState.IdRef="Sequence_6">
                                <Sequence.Variables>
                                  <Variable x:TypeArguments="x:String" Name="Value" />
                                  <Variable x:TypeArguments="x:String" Name="JoinColumnValue" />
                                </Sequence.Variables>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <Assign sap2010:Annotation.AnnotationText="It gets the value from a specific column in the current row, where the column name is dynamically taken from the config, and converts it to a string." sap:VirtualizedContainerService.HintSize="433.6,173.6" sap2010:WorkflowViewState.IdRef="Assign_19">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">[JoinColumnValue]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String">[CStr(CurrentRow(in_LookupConfig(CurrentKey)("Lookup Column Name")))]</InArgument>
                                  </Assign.Value>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </Assign>
                                <Assign sap2010:Annotation.AnnotationText="This condition checks if a value exists in a lookup dictionary, and if it does, it fetches the corresponding value from another DataTable; otherwise, it returns an empty st" sap:VirtualizedContainerService.HintSize="433.6,175.2" sap2010:WorkflowViewState.IdRef="Assign_18">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">[Value]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String" xml:space="preserve">[If(
  ReferenceLookupIndex.ContainsKey(JoinColumnValue),
  dt_ReferenceLookupOutput.Rows(ReferenceLookupIndex(JoinColumnValue))(CurrentKey).ToString(),
  String.Empty
)]</InArgument>
                                  </Assign.Value>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </Assign>
                                <Assign sap:VirtualizedContainerService.HintSize="433.6,104.8" sap2010:WorkflowViewState.IdRef="Assign_10">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Object">[CurrentRow(AddColumnName)]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Object">[Value]</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </Sequence>
                            </ActivityAction>
                          </ui:ForEachRow.Body>
                        </ui:ForEachRow>
                      </Sequence>
                    </If.Then>
                    <If.Else>
                      <Sequence DisplayName="Else" sap:VirtualizedContainerService.HintSize="416,89.6" sap2010:WorkflowViewState.IdRef="Sequence_5">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </Sequence>
                    </If.Else>
                  </If>
                  <Assign DisplayName="LookupOutputDictionary" sap:VirtualizedContainerService.HintSize="433.6,113.6" sap2010:WorkflowViewState.IdRef="Assign_6">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[LookupOutputDictionary]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[New Dictionary(Of String, Object) From {{"LookupOutput", dt_LookupOutput}, {"LookupIndex", LookupIndex}}]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Assign out_LookupOutput with Key and Value" sap:VirtualizedContainerService.HintSize="433.6,104.8" sap2010:WorkflowViewState.IdRef="Assign_7">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[out_LookupOutput(CurrentKey)]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[LookupOutputDictionary]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
          </ui:ForEach>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="537.6,23.2" sap2010:WorkflowViewState.IdRef="Catch`1_1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Rethrow sap:VirtualizedContainerService.HintSize="334.4,24.8" sap2010:WorkflowViewState.IdRef="Rethrow_1" />
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
  </Sequence>
</Activity>